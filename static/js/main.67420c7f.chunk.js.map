{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","strArr","split","reverse","join","res1","match","res","charAt","slice","e","filter","item","i","allItems","indexOf","navigator","clipboard","writeText","replace","length","defaultProps","About","myStyle","setMyStyle","btnText","setBtnText","border","Alert","alert","word","lower","capitalize","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.67420c7f.chunk.js","sourcesContent":["import React from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/*<form className=\"d-flex\">*/}\r\n                    {/*    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>*/}\r\n                    {/*    <button className=\"btn btn-dark\" type=\"submit\">Search</button>*/}\r\n                    {/*</form>*/}\r\n\r\n\r\n\r\n                    {/*Explanation: In the Parent className we have used Ternary Operators.\r\n                        Ternary Operators are used for decision-making in place of longer if and else conditional statements.\r\n                         We have used it to change the color of the text while changing the mode for better visibility.\r\n                          A toggleMode function is assigned to the button which will be invoked on clicking the button.*/}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n\r\n\r\n\r\n\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nNavbar.propTypes = {\r\n    title: propTypes.string,\r\n    aboutText: propTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About text here'\r\n};","import React , {useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick= ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\" , \"success\");\r\n\r\n    }\r\n    const handleLoClick= ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\" , \"success\");\r\n\r\n    }\r\n    const handleOnChange= (event)=>{\r\n        // console.log(\"on change\");\r\n        setText(event.target.value)\r\n\r\n    }\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n        props.showAlert(\"Speak\" , \"success\");\r\n    }\r\n\r\n    const handleReverse = (event) => {\r\n        /* Convert string to array*/\r\n        let strArr = text.split(\"\");\r\n        /* Reverse array*/\r\n        strArr = strArr.reverse();\r\n        /* Convert array to string*/\r\n        let newText = strArr.join(\"\");\r\n        setText(newText);\r\n        props.showAlert(\"Reverse\" , \"success\");\r\n    };\r\n\r\n    const handletextExtract =()=>{\r\n        const regex = /[0-9/A-Z/a-z/ /]/g;\r\n\r\n        const letters = text.match(regex);\r\n        const res1 = letters.join('');\r\n        setText(res1)\r\n        props.showAlert(\"Remove all symbols\" , \"success\");\r\n    };\r\n    const handleNumExtract =()=>{\r\n        const regex = /[0-9/ /]/g;\r\n\r\n        const digits = text.match(regex);\r\n        const res = digits.join('');\r\n        setText(res)\r\n        props.showAlert(\"Extract all numbers\" , \"success\");\r\n    };\r\n    const capitalize = () => {\r\n\r\n        let firstchar = text.charAt(0); // storing the first char of the string\r\n        let newText= firstchar.toUpperCase(); // converting that to uppercase\r\n        setText(newText+text.slice(1)); // printing it with rest excluding the first char by using slice\r\n        props.showAlert(\"Capitalize the first letter\" , \"success\");\r\n\r\n    }\r\n\r\n    const onRemoveDuplicatesClick = (e) => {\r\n        let newText = text.split(' ').filter(function(item,i,allItems){\r\n            return i === allItems.indexOf(item);\r\n        }).join(' ');\r\n\r\n        setText(newText)\r\n        props.showAlert(\"Remove duplicates\" , \"success\");\r\n    }\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n\r\n\r\n    const[text,setText] = useState(\"\");\r\n    return (\r\n        <>\r\n        <div className= \"container\" style={{color: props.mode==='dark'?'white':'#182429'}}>\r\n\r\n            <h1>{props.heading} </h1>\r\n            <div className=\"mb-3\">\r\n                {/*Explanation: The above code changes the background color of the TextBox according to the mode which is being enabled.\r\n                 For example, if dark mode is enabled then the background color of the TextBox will be grey otherwise white.*/}\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#182429'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-outline-success mx-2 my-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-outline-success mx-2 my-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\">Speak</button>\r\n            <button type=\"submit\" onClick={handleReverse} className=\"btn btn-warning mx-2 my-2\">Reverse</button>\r\n            <button type=\"submit\" onClick={handletextExtract} className=\"btn btn-outline-info mx-2 my-2\">Remove all the symbols</button>\r\n            <button type=\"submit\" onClick={handleNumExtract} className=\"btn btn-outline-info mx-2 my-2\">Extract all numbers</button>\r\n            <button type=\"submit\" onClick={capitalize} className=\"btn btn-outline-success mx-2 my-2\">Capitalize</button>\r\n            <button type=\"submit\" onClick={onRemoveDuplicatesClick} className=\"btn btn-outline-secondary mx-2 my-2\">Remove Duplicate</button>\r\n            <button type=\"submit\" onClick={handleCopy} className=\"btn btn-outline-secondary mx-2 my-2\">Copy Text</button>\r\n            <button type=\"submit\" onClick={handleExtraSpaces} className=\"btn btn-outline-secondary mx-2 my-2\">Remove Extra Space</button>\r\n\r\n\r\n        </div>\r\n\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n         <h2>Your text summary</h2>\r\n         {/*Call the split() method on the string, passing it a string containing a space as a parameter. The split method will return an array of the string's words,\r\n          on which you can access the length property to get the number of words in the string.*/}\r\n         <p>{text.replace(/\\n/g, \" \").split(' ').filter(value => value != \"\").length } words and {text.length} characters</p>\r\n         <p>{0.008 * text.replace(/\\n/g, \" \").split(' ').filter(value => value != \"\").length } Minutes is your Average Read Speed</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"To preview it, enter something into the textbox above\"}</p>\r\n            </div>\r\n\r\n    </>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react'\r\n function About(){\r\n    const [myStyle, setMyStyle]=useState({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n\r\n    })\r\n     const [btnText, setBtnText]=useState('Enable Dark Mode')\r\n     const toggleStyle=()=> {\r\n        if(myStyle.color==='black'){\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText('Enable Light Mode')\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            }\r\n            )\r\n            setBtnText('Enable Dark Mode');\r\n        }\r\n     }\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            {/*I add my-3 for spacing*/}\r\n            <h1 className= \"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\"\r\n                                data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\"\r\n                         data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the\r\n                            collapse plugin adds the appropriate classes that we use to style each element. These\r\n                            classes control the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or overriding our default variables.\r\n                            It's also worth noting that just about any HTML can go within\r\n                            the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\"  style={myStyle} type=\"button\" data-bs-toggle=\"collapse\"\r\n                                data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\"\r\n                         data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until\r\n                            the collapse plugin adds the appropriate classes that we use to style each element. These\r\n                            classes control the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or overriding our default variables.\r\n                            It's also worth noting that just about any HTML can go within\r\n                            the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\"\r\n                                data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\"\r\n                         data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the\r\n                            collapse plugin adds the appropriate classes that we use to style each element. These\r\n                            classes control the overall appearance, as well as the showing and hiding via CSS\r\n                            transitions. You can modify any of this with custom CSS or overriding our default variables.\r\n                            It's also worth noting that just about any HTML can go within\r\n                            the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"cntainer my-3\">\r\n                <button onClick={toggleStyle} type=\"button\" className=\"btn btn-secondary\">{btnText}</button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\n\r\n         function Alert(props) {\r\n        const capitalize = (word)=>{\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n    return (\r\n        //alert && is used to check if the alert is true or not\r\n        // If props.alert is null then the code written after \"&&\" won’t be shown otherwise the code inside <div></div> tag will be displayed.\r\n       props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Alert;","import './App.css';\r\nimport Navbar from \"./components/Navbar\";\r\n// import About from \"./components/About\";\r\n\r\nimport TextForm from \"./components/TextForm\";\r\nimport About from './components/About';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\r\n    const [alert, setAlert] = useState(null);//setAlert sets the alert variable\r\n    const showAlert = (message, type)=>{  // showAlert that helps to show the message\r\n     setAlert({\r\n         msg: message,\r\n         type: type\r\n     })\r\n     setTimeout(()=>{\r\n         setAlert(null);\r\n     }, 1749);\r\n    }\r\n\r\n    const toggleMode = ()=>{\r\n        if(mode === 'light'){\r\n            setMode('dark');//setMode('dark'); is a function that sets the state of mode to dark\r\n            document.body.style.backgroundColor = '#182429';\r\n            showAlert(\"Dark mode has been enabled\", \"success\");\r\n            document.title='TextUtils dark Mode';\r\n\r\n        }\r\n        else{\r\n            setMode('light');\r\n            document.body.style.backgroundColor = 'white';\r\n            showAlert(\"Light mode has been enabled\", \"success\");\r\n            document.title='TextUtils light Mode';\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\r\n            {/* <Navbar/> */}\r\n            <Router>\r\n                <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n                <Alert alert={alert}/>\r\n                <div className=\"container my-3\">\r\n                    <Switch>\r\n                        {/* /users --> Component 1\r\n        /users/home --> Component 2 */}\r\n                        <Route exact path=\"/about\">\r\n                            <About />\r\n                        </Route>\r\n                        <Route exact path=\"/\">\r\n                            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n\r\n"],"sourceRoot":""}