{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","components/ColorPallet.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","strArr","split","reverse","join","res1","match","res","charAt","slice","e","filter","item","i","allItems","indexOf","navigator","clipboard","writeText","replace","defaultProps","About","myStyle","href","Alert","height","alert","word","lower","capitalize","ColorPallet","subHeading","toggleMode2","width","cursor","App","setMode","setAlert","message","setTimeout","removeBodyClasses","document","body","classList","remove","exact","path","cls","console","log","add","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8717822c.chunk.js","sourcesContent":["import React from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/*<form className=\"d-flex\">*/}\r\n                    {/*    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>*/}\r\n                    {/*    <button className=\"btn btn-dark\" type=\"submit\">Search</button>*/}\r\n                    {/*</form>*/}\r\n\r\n\r\n\r\n                    {/*Explanation: In the Parent className we have used Ternary Operators.\r\n                        Ternary Operators are used for decision-making in place of longer if and else conditional statements.\r\n                         We have used it to change the color of the text while changing the mode for better visibility.\r\n                          A toggleMode function is assigned to the button which will be invoked on clicking the button.*/}\r\n\r\n\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nNavbar.propTypes = {\r\n    title: propTypes.string,\r\n    aboutText: propTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About text here'\r\n};","import React , {useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick= ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\" , \"success\");\r\n\r\n    }\r\n    const handleLoClick= ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\" , \"success\");\r\n\r\n    }\r\n    const handleOnChange= (event)=>{\r\n        // console.log(\"on change\");\r\n        setText(event.target.value)\r\n\r\n    }\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n        props.showAlert(\"Speak\" , \"success\");\r\n    }\r\n\r\n    const handleReverse = (event) => {\r\n        /* Convert string to array*/\r\n        let strArr = text.split(\"\");\r\n        /* Reverse array*/\r\n        strArr = strArr.reverse();\r\n        /* Convert array to string*/\r\n        let newText = strArr.join(\"\");\r\n        setText(newText);\r\n        props.showAlert(\"Reverse\" , \"success\");\r\n    };\r\n\r\n    const handletextExtract =()=>{\r\n        const regex = /[0-9/A-Z/a-z/ /]/g;\r\n\r\n        const letters = text.match(regex);\r\n        const res1 = letters.join('');\r\n        setText(res1)\r\n        props.showAlert(\"Remove all symbols\" , \"success\");\r\n    };\r\n    const handleNumExtract =()=>{\r\n        const regex = /[0-9/ /]/g;\r\n\r\n        const digits = text.match(regex);\r\n        const res = digits.join('');\r\n        setText(res)\r\n        props.showAlert(\"Extract all numbers\" , \"success\");\r\n    };\r\n    const capitalize = () => {\r\n\r\n        let firstchar = text.charAt(0); // storing the first char of the string\r\n        let newText= firstchar.toUpperCase(); // converting that to uppercase\r\n        setText(newText+text.slice(1)); // printing it with rest excluding the first char by using slice\r\n        props.showAlert(\"Capitalize the first letter\" , \"success\");\r\n\r\n    }\r\n\r\n    const onRemoveDuplicatesClick = (e) => {\r\n        let newText = text.split(' ').filter(function(item,i,allItems){\r\n            return i === allItems.indexOf(item);\r\n        }).join(' ');\r\n\r\n        setText(newText)\r\n        props.showAlert(\"Remove duplicates\" , \"success\");\r\n    }\r\n    const handleCopy = () => {\r\n        // console.log(\"I am copy\");\r\n        // var text = document.getElementById(\"myBox\");\r\n        // text.select();\r\n        navigator.clipboard.writeText(text);\r\n        // document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n\r\n\r\n    const[text,setText] = useState(\"\");\r\n    return (\r\n        <>\r\n        <div className= \"container\" style={{color: props.mode==='dark'?'white':'#182429'}}>\r\n\r\n            <h1 className=\"mb-4\">{props.heading} </h1>\r\n            <div className=\"mb-3\">\r\n                {/*Explanation: The above code changes the background color of the TextBox according to the mode which is being enabled.\r\n                 For example, if dark mode is enabled then the background color of the TextBox will be grey otherwise white.*/}\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#2b3132':'white', color: props.mode==='dark'?'white':'#182429'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled = {text.length===0} className=\"btn btn-outline-success mx-2 my-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled = {text.length===0} className=\"btn btn-outline-success mx-2 my-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled = {text.length===0} type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\">Speak</button>\r\n            <button disabled = {text.length===0} type=\"submit\" onClick={handleReverse} className=\"btn btn-warning mx-2 my-2\">Reverse</button>\r\n            <button disabled = {text.length===0} type=\"submit\" onClick={handletextExtract} className=\"btn btn-outline-info mx-2 my-2\">Remove all the symbols</button>\r\n            <button disabled = {text.length===0} type=\"submit\" onClick={handleNumExtract} className=\"btn btn-outline-info mx-2 my-2\">Extract all numbers</button>\r\n            <button disabled = {text.length===0} type=\"submit\" onClick={capitalize} className=\"btn btn-outline-success mx-2 my-2\">Capitalize</button>\r\n            <button disabled = {text.length===0} type=\"submit\" onClick={onRemoveDuplicatesClick} className=\"btn btn-outline-secondary mx-2 my-2\">Remove Duplicate</button>\r\n            <button disabled = {text.length===0} type=\"submit\" onClick={handleCopy} className=\"btn btn-outline-secondary mx-2 my-2\">Copy Text</button>\r\n            <button disabled = {text.length===0} type=\"submit\" onClick={handleExtraSpaces} className=\"btn btn-outline-secondary mx-2 my-2\">Remove Extra Space</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n         <h2>Your text summary</h2>\r\n         {/*Call the split() method on the string, passing it a string containing a space as a parameter. The split method will return an array of the string's words,\r\n          on which you can access the length property to get the number of words in the string.*/}\r\n\r\n                {/*We have created the function of Counting words in our Textform.js. The split() method */}\r\n                {/*is used to convert the string into an array. In our case, We are splitting the string */}\r\n                {/*by a space and then counting the length of that array, which comes out to be one.*/}\r\n                {/*Therefore, a blank space is being counted as a word.*/}\r\n\r\n                {/*Solution: The quick way of fixing this error is by removing the empty strings from the split array*/}\r\n         <p>{text.replace(/\\n/g, \" \").split(' ').filter(value => value !== \"\").length } words and {text.length} characters</p>\r\n                {/*If the arrow function returns the true value for an element, */}\r\n                {/*then only it would be allowed to stay in the split array. */}\r\n                {/*The filter() does not execute the function for empty array elements.*/}\r\n\r\n         <p>{0.008 * text.replace(/\\n/g, \" \").split(' ').filter(value => value !==\"\").length } Minutes is your Average Read Speed</p>\r\n                <fieldset className=\"border border-200 p-3\"> <h2>Preview</h2>\r\n               <p>{text.length>0?text:\"Nothing to preview!\"}</p></fieldset>\r\n            </div>\r\n\r\n    </>\r\n    );\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n    let myStyle = {\r\n        color: props.mode ==='dark'?'white':'#212a2d',\r\n        backgroundColor: props.mode ==='dark'?'rgb(33, 42, 45)':'white',\r\n    }\r\n     return (\r\n         <div className=\"container\">\r\n             <h1 className=\"my-3\" style={{color: props.mode ==='dark'?'white':'#212a2d'}}>About Us</h1>\r\n             <div className=\"accordion\" id=\"accordionExample\">\r\n                 <div className=\"accordion-item\">\r\n                     <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                         <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                             <strong>About Developer</strong>\r\n                         </button>\r\n                     </h2>\r\n                     <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                         <div className=\"accordion-body\" style={myStyle}>\r\n                             <p> I'm Subham Maity who developed this website using ReactJS. If you would like to contribute some functionality or add more features to this, please take a look at this repository and if you have any issues, please let me know.  </p>\r\n\r\n                             <li><strong><a href=\" https://github.com/Subham-Maity/textutils \">Github Repository Of TextUtils</a></strong>  </li>\r\n\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n                 <div className=\"accordion-item\">\r\n                     <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                         <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                             <strong>Features </strong>\r\n                         </button>\r\n                     </h2>\r\n                     <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                         <div className=\"accordion-body\" style={myStyle}>\r\n                             TextUtils is a React-based application that provides seamless text editing with many useful features\r\n                             Features :\r\n                             <li>1. Dark theme features that make the app appear more appealing to the user</li>\r\n                             <li> 2. Convert to Uppercase</li>\r\n                                 <li>3. Convert to Lowercase</li>\r\n                                     <li>3. Speak</li>\r\n                                         <li>4. Reverse</li>\r\n                                             <li> 5. Remove all the symbols</li>\r\n                                                 <li> 6. Extract all numbers</li>\r\n                                                     <li> 7. Capitalize</li>\r\n                                                         <li>  8. Remove Duplicate</li>\r\n                                                             <li>  9. Copy Text</li>\r\n                                                                 <li>  10. Remove Extra Space</li>\r\n                                                                     <li>  11. Words and Characters Count</li>\r\n                                                                         <li>   12. Your Average Read Speed Count</li>\r\n                                                                             <li>   13. Preview</li>\r\n                                                                              <li>   14. Clear text</li>\r\n                                                                                  <li>   15. Color Palette</li>\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n                 <div className=\"accordion-item\">\r\n                     <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                         <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                             <strong>Browser Compatible </strong>\r\n                         </button>\r\n                     </h2>\r\n                     <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                         <div className=\"accordion-body\" style={myStyle}>\r\n                             Using this tool you can count characters in any web browser, such as Chrome, Firefox, Explorer, Safari, or Opera, and it is suitable for counting characters in Facebook, blogs, books, excel spreadsheets, PDFs, essays, etc.\r\n\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n\r\n         </div>\r\n     )\r\n }\r\n\r\n\r\nexport default About;","import React from 'react';\r\n\r\n         function Alert(props) {\r\n        const capitalize = (word)=>{\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n             return (\r\n                 <div style={{height: '50px'}}>\r\n                     {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                         <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n                     </div>}\r\n                 </div>\r\n             )\r\n         }\r\nexport default Alert;","import React from 'react';\r\n\r\nfunction ColorPallet(props) {\r\n    return (\r\n        <>\r\n        {/*< className= \"container\" style={{color: props.mode==='dark'?'white':'#182429'}}>*/}\r\n\r\n            <div className=\"mb-8\"style={{color: props.mode==='dark'?'white':'#182429'}}>\r\n\r\n            {/*<fieldset className=\"border border-200 p-3\">*/}\r\n                <h5 className=\"mt-5\">{props.heading}  </h5>\r\n                  <p className=\"mb-3\">{props.subHeading}</p>\r\n        <div className=\"d-flex \" >\r\n\r\n            <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode2('primary')}} style={{height: '30px', width:'30px', cursor: 'pointer'}}></div>\r\n            <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode2('danger')}} style={{height: '30px', width:'30px', cursor: 'pointer'}}></div>\r\n            <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode2('success')}} style={{height: '30px', width:'30px', cursor: 'pointer'}}></div>\r\n            <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode2('warning')}} style={{height: '30px', width:'30px', cursor: 'pointer'}}></div>\r\n            <div className=\"bg-light rounded mx-2\" onClick={()=>{props.toggleMode2('light')}} style={{height: '30px', width:'30px', cursor: 'pointer'}}></div>\r\n            <div className=\"bg-dark rounded mx-2\" onClick={()=>{props.toggleMode2('dark')}} style={{height: '30px', width:'30px', cursor: 'pointer'}}></div>\r\n\r\n        </div>\r\n            {/*</fieldset>*/}\r\n        </div>\r\n        </>\r\n            );\r\n\r\n}\r\n\r\nexport default ColorPallet;\r\n","import './App.css';\r\nimport Navbar from \"./components/Navbar\";\r\n// import About from \"./components/About\";\r\n\r\nimport TextForm from \"./components/TextForm\";\r\nimport About from './components/About';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport ColorPallet from \"./components/ColorPallet\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\r\n    const [alert, setAlert] = useState(null);//setAlert sets the alert variable\r\n    const showAlert = (message, type)=>{  // showAlert that helps to show the message\r\n     setAlert({\r\n         msg: message,\r\n         type: type\r\n     })\r\n     setTimeout(()=>{\r\n         setAlert(null);\r\n     }, 1749);\r\n    }\r\n\r\n    const removeBodyClasses = ()=>{\r\n        document.body.classList.remove('bg-light')\r\n        document.body.classList.remove('bg-dark')\r\n        document.body.classList.remove('bg-warning')\r\n        document.body.classList.remove('bg-danger')\r\n        document.body.classList.remove('bg-success')\r\n    }\r\n    const toggleMode = ()=>{\r\n        removeBodyClasses();\r\n        if(mode === 'light'){\r\n            setMode('dark');//setMode('dark'); is a function that sets the state of mode to dark\r\n            document.body.style.backgroundColor = '#182429';\r\n            showAlert(\"Dark mode has been enabled\", \"success\");\r\n            document.title='TextUtils dark Mode';\r\n\r\n        }\r\n        else{\r\n            setMode('light');\r\n            document.body.style.backgroundColor = 'white';\r\n            showAlert(\"Light mode has been enabled\", \"success\");\r\n            document.title='TextUtils light Mode';\r\n        }\r\n    }\r\n    const toggleMode2 = (cls)=>{\r\n        removeBodyClasses();\r\n        console.log(cls)\r\n        document.body.classList.add('bg-'+cls)\r\n        if(mode === 'light'){\r\n            setMode('dark');\r\n            document.body.style.backgroundColor = '#042743';\r\n            showAlert(\"Dark mode has been enabled\", \"success\");\r\n        }\r\n        else {\r\n            setMode('light');\r\n            showAlert(\"Light mode has been enabled\", \"success\");\r\n            document.title='TextUtils light Mode';\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\r\n            {/* <Navbar/> */}\r\n            <Router>\r\n                <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}  />\r\n\r\n                <Alert alert={alert}/>\r\n                <div className=\"container my-3\">\r\n                    <Switch>\r\n                        {/* /users --> Component 1\r\n        /users/home --> Component 2 */}\r\n                        <Route exact path=\"/about\">\r\n                            <About mode = {mode} />\r\n                        </Route>\r\n                        {/*<Route exact path=\"/\">*/}\r\n                            <TextForm showAlert={showAlert} heading=\"Try TextUtils - Just one click to make your document better!\" mode={mode} toggleMode ={toggleMode}/>\r\n                        {/*</Route>*/}\r\n                    </Switch>\r\n                    <ColorPallet showAlert={showAlert} heading=\"Color Palette \" subHeading=\"As you wish, you can customize your background  \" mode={mode} toggleMode2={toggleMode2} />\r\n                </div>\r\n            </Router>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n\r\n"],"sourceRoot":""}